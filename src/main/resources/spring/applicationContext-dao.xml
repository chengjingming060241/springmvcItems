<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--1:引入外部properties文件-->
    <context:property-placeholder location="classpath:mysql.properties" file-encoding="UTF-8"></context:property-placeholder>

    <!--2:数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!--这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)-->
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <!--连接数据库的url，不同数据库不一样。例如：-->
        <!--mysql : jdbc:mysql://10.20.153.104:3306/druid2-->
        <!--oracle : jdbc:oracle:thin:@10.20.149.85:1521:ocnauto-->
        <property name="url" value="${jdbc.url}"/>
        <!--连接数据库的用户名-->
        <property name="username" value="${jdbc.username}"/>
        <!--连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。-->
        <property name="password" value="${jdbc.password}"/>
        <!--初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时,缺省是0-->
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <!--最大连接池数量,缺省是8-->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：-->
        <!--监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall-->
        <property name="filters" value="${jdbc.filters}"/>
        <!--获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。-->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!--最小连接池数量-->
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!--有两个含义：-->
        <!--1) Destroy线程会检测连接的间隔时间-->
        <!--2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明-->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <!--用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。-->
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <!--建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。-->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <!--申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。缺省为true-->
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <!--归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能，缺省为false-->
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <!--是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。缺省为false-->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/>
        <!--指定每个连接上PSCache的大小-->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>
        <!--删除没用的连接-->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>
        <!--删除连接超时-->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/>
        <!--删除没用的连接日志-->
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/>
        <!--物理连接初始化的时候执行的sql-->
        <property name="connectionInitSqls" value="${jdbc.connectionInitSqls}"/>
    </bean>

    <!--3：sqlSessionFactory-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource"></property>
        <!--配置mybatis全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--扫描sql配置文件：mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:com/cheer/mapper/*.xml"></property>
        <!--typeAliasesPackage:批量别名处理-->
        <property name="typeAliasesPackage" value="com.cheer.model"></property>
    </bean>

    <!--4:配置扫描Dao接口包，动态实现dao接口，注入到spring容器中 mapper扫描器-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cheer.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>
</beans>